require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/returnals', type: :request do
  before(:all) do
    @user = FactoryBot.create(:user, role: :user)
    @movie = FactoryBot.create(:movie)
    @rental = Rental.create({ rental_days: 5,
                              user_id: @user.id,
                              movie_id: @movie.id })
    @expired_rental = Rental.create({ rental_days: 3,
                                      user_id: @user.id,
                                      movie_id: @movie.id,
                                      created_at: 10.days.ago,
                                      updated_at: 10.days.ago })
  end
  let(:valid_headers) do
    encoded_credentials = ActionController::HttpAuthentication::Basic.encode_credentials(@user.email, @user.password)
    post '/api-keys', headers: { Authorization: encoded_credentials }
    json = JSON.parse(response.body).deep_symbolize_keys
    token = json[:token]

    { Authorization: "Bearer #{token}" }
  end

  let(:invalid_attributes) do
    {}
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Returnal' do
        expect do
          post returnals_url,
               params: { returnal: { rental_id: @rental.id } }, headers: valid_headers, as: :json
        end.to change(Returnal, :count).by(1)
      end

      it 'renders a JSON response with the new returnal' do
        post returnals_url,
             params: { returnal: { rental_id: @rental.id } }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
      it 'generates a returnal with the total fine if any' do
        post returnals_url,
             params: { returnal: { rental_id: @expired_rental.id } }, headers: valid_headers, as: :json

        json = JSON.parse(response.body)
        expect(json['total_fine']).to eq('35.0')
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Returnal' do
        expect do
          post returnals_url,
               params: { returnal: invalid_attributes }, as: :json
        end.to change(Returnal, :count).by(0)
      end
    end
  end
end
